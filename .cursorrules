You are an expert typescript, node, and kotlin developer. You are building an application where users compete with other users on getting the least amount of screen time. They can compete within groups which can be created and joined, and each group as a target screen time. There is a leaderboard for each group which shows the ranking of the screen times in ascending order. The backend authentication uses JWT and provides an access token in the cookies along with a bearer token in the authorization header. You have the ability to sign in/up with google or email/password.

Your job is to develop the kotlin app with compose that interfaces with this backend, providing all functionality and tracks the user's screen time. Here is a sample list of the needed screens:

- Sign up / login
- Create/join group
- invite to group
- Home page with group summaries & screen time average
- Group page: view leaderboard

Here are some of the types from the backend:

declare namespace Models {
// Common Timestamps
interface Timestamps {
inserted_at: Date;
updated_at?: Date; // Optional for tables without `updated_at`
}

    // User Model
    interface User extends Timestamps {
    	id: number;
    	email: string;
    	profile_picture: string;
    	name: string;
    }

    // Authentication Model
    interface Authentication {
    	user_id: number;
    	password?: string;
    	google_id?: string;
    	github_id?: string;
    }

    // Group Model
    interface Group extends Timestamps {
    	id: number;
    	screen_time_goal: number;
    	code: string;
    	stake: number;
    	name: string;
    }

    // UserGroup Model
    interface UserGroup extends Timestamps {
    	user_id: number;
    	group_id: number;
    }

    // ScreenTime Model
    interface ScreenTime extends Timestamps {
    	id: number;
    	user_id: number;
    	group_id: number;
    	submitted_time: number;
    }

}

Here are the current routes:

User routes: /user
// [GET] Get current user
router.get('/', authenticate, getSelf);

// [GET] Get user by ID
router.get('/:id', authenticate, getUserDetails);

// [PUT] Update current user
router.put('/', authenticate, updateUser);

Token routes: /token

// [POST] refresh to get a new access & refresh token
router.post('/refresh', refreshToken);

Group routes: /groups

// [GET] all/associated groups
router.get('/', authenticate, listGroups);

// [GET] specific group
router.get('/:id', authenticate, getGroup);

// [POST] create group
router.post('/', authenticate, createGroup);

// [PUT] handle user invite to group
router.put('/:group_id/invite', authenticate, createInvite);

// [PUT] handle user joining group
router.put('/join', authenticate, joinGroup);

// [DELETE] deletes group
router.delete('/:id', authenticate, deleteGroup);

// [GET] specific group's screen time
router.get('/:id/time', authenticate, getGroupScreenTime);

// [POST] add screen time to group
router.post('/:id/time', authenticate, addScreenTime);

// [GET] weekly rankings
router.get('/:id/rankings', authenticate, getWeeklyRankings);

// [GET] historical rankings
router.get('/:id/historical', authenticate, getHistoricalRankings);

Auth routes: /auth
// [POST] login/signup with Google
router.post('/google', googleAuth);

// [POST] login/signup with Github
router.post('/github', githubAuth);

// [POST] login with email and password
router.post('/login', loginUser);

// [POST] signup with email and password
router.post('/register', registerUser);

// [DELETE] logout
router.delete('/logout', logoutUser);

Currently, auth is implemented.
Here are the original given instructions for the project:

Objective:
Design and develop an Android application.
What to create :
Students are free to choose their project ideas. Whether it's a groundbreaking AI application, crafting simulations of popular platforms like Meta, instagram etc, or developing efficient management apps for various industries, the possibilities are endless.Ultimately, the goal is to help you to pursue your passions, showcase your talents, and create projects that reflect your unique perspectives and interests.
How to choose UI :
Design your UI to match your app's goals. Make it easy to navigate and focus on what's important. Keep it organised and interactive for users.
Mandatory Components in project:
MVVM Architecture: Implement Model-View-ViewModel architecture to ensure separation of concerns and maintainability.
4 Screens: Design and implement 4 distinct screens for the application.
Coroutines: Utilise Kotlin coroutines for asynchronous programming to ensure smooth user experience.
Retrofit: Integrate Retrofit library for making network requests to backend services.
Navigation Graph: Use Compose NavHost to manage navigation between screens efficiently.
Jetpack Compose: Implement UI using Jetpack Compose
Glide: Use Glide library to efficiently load images in the application.
Room Database: Implement Room database for offline support.
Unit Testing: Write unit tests for each ViewModel and Repository to ensure functionality and reliability.
UI Testing: Implement at least 1 UI test per screen to ensure UI functionality and responsiveness.

Backend:
Utilize Firebase backend, AWS, or comparable services for backend operations.
Data can be simulated within these APIs; there's no requirement to implement databases in the backend.
Optional Bonus Points (2 each) :
WorkManager: Implement WorkManager to periodically load data from backend services for real-time updates.
Play Store Deployment: Upload the application on Google Play Store for wider distribution and accessibility.
Submission Requirements:
Phase 1: Please submit a PDF containing sketches or drawings of your application screens for initial feedback.
Phase 2 : Consider this phase as an internal project milestone. Ideally, students should have their data flow set up at this stage. No submission is necessary for this phase.
Final Submission: One student from the group should submit a zip file containing the complete project.
Presentation: Prepare 3 slides covering the project overview, individual contributions, inspiration behind the project, and future scope.

Example Project :

App Name :
MyGym.

Project Brief :
We are creating a shopping application modelled after Amazon, allowing users to log in and display any desired project within the app. We have narrowed down the scope where users can purchase workout equipment.
In our future phases, we will incorporate areas like personal training, home workout ideas and we will introduce a subscription model.

Anatomy of Project :
Our App includes screens like Login, Registration, Home Screen that showcases products, Product details and cart screen.

Backend :
We are using AWS to host 2 apiâ€™s.
1st api provides mock data for list of products and  
2nd api provides the details for the product based on its id.

How it works :
The user undergoes the registration process initially and proceeds to log in. Users remain logged in until they choose to log out explicitly.
Upon logging in, users are directed to the home screen, where they can browse a list of available products.
Users have the option to select any product and view its details on a separate screen with a simple click.
Our application provides offline support, allowing users to access product listings even when they're offline. However, the availability of product details may vary depending on the cache.
